//////// START THE APPLICATION ////////
Environment
Py+venv

requirements


Quickstart

Step #1 - Get the source code

- Download the ZIP
- Use GIT tool in the terminal/powershel/bash to clone the source code

Step #2 - Set up the environment

- Python3 should be installed properly in the workstation. If you are not sure if Python is 
properly installed, please open a terminal and type python --version.
- Enter the project folder using the terminal/powershel/bash.
- Install modules using a Virtual Environment
    https://docs.python.org/3/library/venv.html

    MacOS/Linux
    $ cd myproject
    $ python3 -m venv venv
    $ . venv/bin/activate

    > cd myproject
    > py -3 -m venv venv
    > venv\Scripts\activate

N.B: in Windows, a restriction error can occur. In this case, write down the command "Set-ExecutionPolicy Unrestricted -Scope Process". This will allow running virtualenv in the current PowerShell session.
https://stackoverflow.com/questions/18713086/virtualenv-wont-activate-on-windows

Step #3 - Install requirements
pip install -r requirements.txt

Step #4 - Run the application
bash
$ export FLASK_APP=hello
$ flask run
 * Running on http://127.0.0.1:5000/

CMD
> set FLASK_APP=hello
> flask run
 * Running on http://127.0.0.1:5000/

Powershell
> $env:FLASK_APP = "hello"
> flask run
 * Running on http://127.0.0.1:5000/



//////// USE OR MIGRATE TEMPLATE ////////
Let's keep it simple.

What we should have:
- app.py
- config.json
- personal.css
- main.js
- requirements.txt

We need to integrate these files into a new template. The structure that we want to have is:
- static folder:
    - css folder + personal.css
    - img folder + anything necessary
    - js + main.js
    - scss
    - any other folder necessary for the template
- templates folder:
    - a base.html that we rename layout.html
    - index.html
    - navigation.html
    - sidebar.html
    - footer.html
    - alternative layout
- app.py
- config.json
- requirements.txt

We take every file we need from the template and place it in the right spots.
For the HTML pages, it is important to take a few things into consideration:
1. the paths that redirect to other files need to be correct, so check them! You can easily do this work with the function Find/Replace. 
    An example: 'static/assets/css/<filename>.css' should be corrected to 'static/css/<filename>.css'.

2. Anything regarding the login functionality can be ignored and deleted, we don't neet it for the purpose of this dashboard.
    It can usually be found in the mail html files (index, navigation and sidebar).

3. Remember to add any useful and necessary link (in particular to personal.css and main.js).

4. Keep only the content that can be useful.
    For this purpose, I find it useful to keep the demo open in my browser and use the developer tool to identify HTML element that I don't need and erase them from my files.

5. Fill with content.
** AGGIUNGERE FORSE QUALCOSA QUI DI SPECIFICO SULLA CREAZIONE DEL LAYOUT **
     This can be the part that requires more effort, because we need to adapt again the content based on both our needs and the new template
     My suggestion is to not alter massively the template shape, otherwise responsiveness could suffer.


For both css and js content, it is important to add custum id and classes wherever necessary.

//////// CHARTS ////////
****** words ******

//////// BAR CHART ////////

Requirements:
- chart label: a few words that will be displayed on top of the chart; they should be 
representative
- query: The query must be structured in such a way as to have as results two columns 
with label x and y for the values ​​that will go on the respective axes of the Cartesian plane.
- axes labels: provide actual labels for each axis (max 2 words)




query grafi

SELECT DISTINCT ?g ?pp ?oo WHERE { GRAPH ?g {?s ?p ?o}. ?g ?pp ?oo } LIMIT 10

http://www.w3.org/ns/prov#generatedAtTime

In the file config, for the chart, I've adde a field called "axes_label": ["xlabel", "ylabel"]: these labels should be specified manually by the person that compiles the query.
They could be uselful for visuliazation reasons: in the data I need generic x,y for implementation reasons, but in case the graph needs label in the axes, I can draw from them.

#### determine the frequency of a predicate's use
SELECT ?predicate (COUNT (?predicate) AS ?count)
WHERE {
  ?s ?predicate ?o .
}
GROUP BY ?predicate
ORDER BY DESC(?count)


/////// COLORS
//// generate color for chart starting from pilot ones
https://codenebula.io/javascript/frontend/dataviz/2019/04/18/automatically-generate-chart-colors-with-chart-js-d3s-color-scales/
https://observablehq.com/@d3/working-with-color


////// COUNT function
ho provato:
- "operations": "count(label)"
- "operations": ["count", "label"]


/////// STACKED BARCHART da aggiungere dopo
{
          "chart_type": "stacked_barchart",
          "query": "SELECT ?y_value ?x_label WHERE { ?entry <https://schema.org/additionalType> ?type . ?type rdfs:label ?x_label . ?entry <https://schema.org/audience> ?audience . ?audience rdfs:label ?y_value . }",
          "chart_title": "Audience per Collection Type",
          "axes_label": [
            "xlabel",
            "ylabel"
          ],
          "operations": "count"
        }